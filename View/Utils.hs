{-# LANGUAGE OverloadedStrings #-}
module View.Utils where

import Miso
import Miso.String (pack, unpack)
import qualified Miso.String as MS
import Data.List (intersperse, dropWhileEnd, groupBy)
import ProofTree
import Data.Char
import qualified Data.Map as M

axiomHeading i = div_ [class_ "item-rule-theoremheading"] [anchor i [text "Axiom."]]
theoremHeading i = div_ [class_ "item-rule-theoremheading"] [anchor i [text "Theorem."]]
metabinder v = span_ [ class_ "rule-binder" ] (name v ++ [text "."])
context [] = span_ [ ] []
context v = span_ [ ] v
space = span_ [class_ "space" ] [text " "] 
turnstile = span_ [class_ "symbol symbol-turnstile symbol-bold" ] [text "‚ä¢"] 
miniTurnstile = sub_ [class_ "symbol-mini"] [text "‚ä¢"]
comma = span_ [class_ "symbol symbol-bold symbol-comma" ] [text ","] 
placeholder = span_ [class_ "placeholder" ] [text "‚ê£"] 
localrule i = span_ [ class_ "rule-rulename-local" ] [text (pack (show i))]
renderRR (Defn d) = span_ [ class_ "rule-rulename-defined" ] (name d)
renderRR (Local i) = localrule i
anchor i = a_ [id_ $ "anchor" <> pack (show i)]
button cls onClk = button_ [class_ cls, onClick onClk]
submitButton cls = button_ [class_ cls]
focusedButton cls onClk content = multi [button_ [class_ cls, id_ "focusedButton", onClick onClk ] content
                                , script_ [] "document.getElementById('focusedButton').focus();"]
focusHack i = script_ [] $ "document.getElementById('" <> i <> "').focus(); document.getElementById('" <> i <> "').select();"
typicon icn = span_ [class_ $ "typcn typcn-" <> icn] [] 
block cls is = div_ [class_ cls] is
inline cls is = span_ [class_ cls] is
multi = span_ []
labelledBrackets content label = multi [inline "symbol symbol-bold" [text "‚ü®"], content, inline "symbol symbol-bold" [text "‚ü©"], sup_ [] [ label ]]
parenthesise = ([inline "symbol" [text "("]] ++) . (++ [inline "symbol" [text ")"]])

textbox i act n = input_ [id_ i, onInput act, value_ n]

expandingTextbox i act n = input_ [id_ i, style_ (M.singleton "width" (pack (show $ (((fromIntegral (MS.length n) + 1) *16) / 30)) <> "em")) , onInput act, value_ n]

expandingTextarea ids cls act textIn = multi
     [ textarea_ [ id_ ids, onInput act, class_ cls]  [text textIn]
     , script_ []  $ "it = document.getElementById('ta');" <>
                     "var fn = function() {" <>
                     "it.style.height=''; it.style.height = it.scrollHeight+'px'; " <>
                     "}; window.setTimeout(fn,100); it.addEventListener('input',fn);" <>
                     "it.focus();it.setSelectionRange(it.value.length, it.value.length);"
     ]

inferrule binders premises spacer ruleTitle conclusion = 
   table_ [intProp "cellpadding" 0, intProp "cellspacing" 0 ]
       [ tr_ [] $
             [td_ [class_ "rule-cell rule-binderbox", rowspan_ "2"] binders]
          ++ map (td_ [class_ "rule-cell rule-premise"] . pure) premises
          ++ [td_ [class_ "rule-cell rule-spacer"] [spacer]]
          ++ [td_ [rowspan_ "2", class_ "rule-cell rule-rulebox"] [ruleTitle] ]
       , tr_ [] [td_ [class_ "rule-cell rule-conclusion",colspan_ (pack $ show $ length premises + 1)] conclusion]
       ]

name [] = []
name ('_':str) = placeholder : name str
name (' ':str) = name str
name str | (first, rest) <- span (`notElem` ("_ " :: [Char])) str = name' first ++ name rest

name' s = let noPrimes = dropWhileEnd (== '\'') s
              bulk = dropWhileEnd (isDigit) noPrimes
              rest = drop (length bulk) noPrimes
              bulk' = case bulk of 
                    "/\\" -> "‚àß"
                    "\\/" -> "‚à®"
                    "not" -> "¬¨"
                    "->"  -> "‚Üí"
                    "<-"  -> "‚Üê"
                    "<->" -> "‚Üî"
                    "-->"  -> "‚ü∂"
                    "<--"  -> "‚üµ "
                    "<-->" -> "‚ü∑"
                    "=>"  -> "‚áí"
                    "<=="  -> "‚áê"
                    "<=>" -> "‚áî"
                    "<==>" -> "‚ü∫"
                    "==>" -> "‚üπ"
                    "<===" -> "‚ü∏"
                    "<-|"  -> "‚Ü§"
                    "=="   -> "‚â°"
                    "lub"  -> "‚äì"
                    "glb"  -> "‚äî"
                    "~="   -> "‚âÉ"
                    "~"    -> "‚àº"
                    "all"  -> "‚àÄ" 
                    "exists" -> "‚àÉ"
                    ":="   -> "‚âî"
                    "times"   -> "√ó"
                    "bot"   -> "‚ä•"
                    "top"   -> "‚ä§"
                    "infinity" -> "‚àû"
                    "[["  -> "„Äö"
                    "]]"  -> "„Äõ"
                    "[<"  -> "„Äà"
                    ">]"  -> "„Äâ"
                    ">>]"  -> "„Äã"
                    "[<<"  -> "„Ää"
                    "<="   -> "‚â§"
                    ">="   -> "‚â•"
                    "/="   -> "‚â†"
                    "|->" -> "‚Ü¶"
                    "nat" -> "‚Ñï"
                    "rational" -> "‚Ñö"
                    "int" -> "‚Ñ§"
                    "real" -> "‚Ñù"
                    "bool" -> "ùîπ"
                    "product" -> "‚àè" 
                    "coproduct" -> "‚àê"  
                    "sum"       -> "‚àë"
                    "union" -> "‚à™"
                    "intersection" -> "‚à©"
                    "subseteq" -> "‚äÜ"
                    "supseteq" -> "‚äá"
                    "subset"   -> "‚äÇ"
                    "supset"   -> "‚äÉ"
                    "elem"     -> "‚àà"
                    "eval"     -> "‚áì"
                    "alpha" -> "Œ±"
                    "beta" -> "Œ≤"
                    "gamma" -> "Œ≥"
                    "delta" -> "Œ¥"
                    "epsilon" -> "Œµ"
                    "zeta" -> "Œ∂"
                    "eta" -> "Œ∑"
                    "theta" -> "Œ∏"
                    "iota" -> "Œπ"
                    "kappa" -> "Œ∫"
                    "lambda" -> "Œª"
                    "varepsilon" -> "œµ"
                    "mu" -> "Œº"
                    "nu" -> "ŒΩ"
                    "xi" -> "Œæ"
                    "pi" -> "œÄ"
                    "rho" -> "œÅ"
                    "sigma" -> "œÉ"
                    "varsigma" -> "œÇ"
                    "tau" -> "œÑ"
                    "phi" -> "œÜ"
                    "psi"-> "œà"
                    "chi" -> "œá"
                    "omega" -> "œâ"
                    "upsilon" -> "œÖ"
                    "Gamma" -> "Œì"
                    "Delta" -> "Œî"
                    "Theta" -> "Œò"
                    "Lambda" -> "Œõ"
                    "Xi" -> "Œû"
                    "Pi" -> "Œ†"
                    "Sigma" -> "Œ£"
                    "Phi" -> "Œ¶"
                    "Psi"-> "Œ®"
                    "Omega" -> "Œ©"
                    _ -> bulk
              primeString = makePrimeString (length s - length noPrimes)
              makePrimeString 0 = ""
              makePrimeString 1 = "‚Ä≤"
              makePrimeString 2 = "‚Ä≥"
              makePrimeString 3 = "‚Ä¥"
              makePrimeString 4 = "‚Åó"
              makePrimeString n = "‚Åó" <> makePrimeString (n - 4)

           in if bulk' == "" then [text (pack rest)] else [text (pack bulk'), sub_ [] [text (pack rest)], text primeString ]             
